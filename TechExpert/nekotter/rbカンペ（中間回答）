<%= render partial: "ranking/ranking", locals: { product: product, i: i } %>

def register_book(books)
  puts '著者を入力してください'
  author = gets.chomp
  puts 'タイトルを入力してください'
  title = gets.chomp
  puts '価格を入力してください'
  price = gets.to_i
  book = { author: author, title: title, price: price }
  books << book
end

def show_books(books)

  puts "平均価格: #{average_price(books)}"
  puts "見たい番号を入力してください"
  books.each_with_index do |book, index|
    puts "#{index + 1}: #{book[:title]}"
  end
  input = gets.to_i
  show_detail(books[input - 1])
end

def show_detail(book)
  puts "著者 #{book[:author]}"
  puts "タイトル #{book[:title]}"
  puts "価格 #{book[:price]}円"
end

def average_price(books)
  total = 0
  books.each do |book|
    total += book[:price]
  end
  average = total / books.length
end

books = []
while true do
  puts "番号を入力してください"
  puts "0: 本を登録する"
  puts "1: 本の一覧を見る"
  puts "2: 終了する"
  case gets.to_i
  when 0
   register_book(books)
  when 1
    show_books(books)
  when 2
    exit
  else
    puts '無効な値です'
  end
end

<%= render partial: "ranking/ranking", locals: { product: product, i: i } %>

√@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@












def register_data(cars)
  # 車を登録するための関数を完成させなさい
  # 時間当たりの走行距離については、少数を扱うことが出来るようにto_fを扱い、乗車人数に関しては、to_iを使用すること
  puts "車種の入力をして下さい"
  type = gets.chomp
  puts "時間当たりの走行距離(km/h)を入力して下さい"
  fuel_economy = gets.to_f
  puts "乗車可能人数を入力して下さい"
  capacity = gets.to_i

  car = { type: type, fuel_economy: fuel_economy, capacity: capacity }
  cars << car
end

def show_cars(cars)
  # 保存した車種の一覧を表示するための関数を完成させなさい
  cars.each_with_index do |car, index|
    puts "[#{index}]: #{car[:type]}"
  end
  # 確認したい番号を入力した後に、show_dataの関数を呼び出すようにしなさい
  puts "確認したい番号を入力して下さい。"
  input = gets.to_i
  car = cars[input]
  if car
    show_data(car)
  else
    puts "該当する番号はありません。"
  end
end

def show_data(car)
  # 一覧から選択された車の全ての情報を表示する関数を完成させなさい
  puts car[:type]
  puts "燃費:#{car[:fuel_economy]}km/h"
  puts "乗車人数:#{car[:capacity]}人"

  puts "これから走る距離(km)を入力して下さい。"
  input_distance = gets.to_f

  puts "これから乗る人数を入力して下さい。"
  input_capacity = gets.to_i

  # 目的地までの時間を計算する関数と乗車人数を計算する関数を呼び出して下さい
  car_distance(car, input_distance)
  car_capacity(car, input_capacity)
end


def car_distance(car, distance)
  # 目的地までの時間を計算する関数を完成させなさい
  elapsed_time = distance / car[:fuel_economy]
  puts "その目的地までは、#{elapsed_time.round(1)}時間かかります。"
end

def car_capacity(car, capacity)
  # 車に乗ることが出来る人数について、後何人乗ることが出来るのか、丁度乗ることが出来る人数なのか、もしくは何人定員オーバーなのかを出力する関数を完成させなさい
  capacity = car[:capacity] - capacity
  if capacity == 0
    puts "車の定員丁度です。"
  elsif capacity > 0
    puts "後、車には#{capacity}人乗ることができます。"
  else
    puts "#{capacity.abs}人定員オーバーです。"
  end
end

cars = []

while true do
  puts "番号を入力して下さい"
  puts "[0]:登録をする"
  puts "[1]:データを確認する"
  puts "[2]:終了する"

  input = gets.chomp
  case input
  when "0"
    # 車種を登録するための関数を呼び出しなさい。
    register_data(cars)
  when "1"
    # 保存したデータを一覧で表示するための関数を呼び出しなさい。
    show_cars(cars)
  when "2"
    # アプリケーションを終了させなさい。
    exit
  else
    puts "無効な値です"
  end
end


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

def register_data(data)

  puts "名前を入力してください"
  name = gets.chomp
  puts "パンチ力を入力してください(0 ~ 100)"
  punch = power(gets.to_i)
  puts "キック力を入力してください(0 ~ 100)"
  kick = power(gets.to_i)
  puts "ジャンプ力を入力してください(0 ~ 100)"
  jump = power(gets.to_i)

  person = {name: name, punch: punch, kick: kick, jump: jump,  rank: hero_rank(punch, kick, jump)}
  data << person

end

def power(power)
    while power > 100
      puts "100以下の数字を入力してください"
        power = gets.to_i
    end
    return power
end


def hero_rank(punch, kick, jump)

  power = punch + kick + jump
  if power == 300
    rank = "A"
  elsif 100 <= power && power < 300
    rank = "B"
  elsif 20 <= power && power < 100
    rank = "C"
  else
    rank = "D"
  end

end

def show_data_list(data)

  puts '見たい人の番号を選択してください'
  data.each_with_index do |person, index|
    puts "#{index + 1}: #{person[:name]}"
  end

  input = gets.to_i - 1
  person = data[input]
  puts "名前: #{person[:name]}"
  puts "パンチ力: #{person[:punch]}"
  puts "キック力: #{person[:kick]}"
  puts "ジャンプ力: #{person[:jump]}"
  puts "ヒーローランク: #{person[:rank]}"

end


data = []

while true
  puts '選択してください'
  puts '[0]登録する'
  puts '[1]データを確認する'
  puts '[2]終了する'
  input = gets.to_i

  if input == 0
    register_data(data)
  elsif input == 1
    show_data_list(data)
  elsif input == 2
    exit
  else
    puts '無効な値です'
  end
end


@@@@@@@@@@@@@@@@@@@@@@@


def post_review(a_cart)
 # 変数の定義
  post = {}
  puts "商品名を入力してください："
  post[:name]  = gets.chomp
  puts "値段を入力してください："
  post[:price]  = gets.to_i
  puts "個数を入力してください："
  post[:count] = gets.to_i
  line   = "---------------------------"

 # レビューの描画
  puts "商品名 : #{post[:name]}\n#{line}"
  puts "値段 : #{post[:price]}\n#{line}"
  puts "個数 : #{post[:count]}\n#{line}"
  puts "合計金額 :#{post[:price] * post[:count]}\n#{line}"

 # 配列オブジェクトに追加
  a_cart << post

 # a_cartをメソッドの呼び出し元に返す
  return a_cart
end

def check_reviews(a_cart)
 # リストの表示
  total_price = 0
  line   = "---------------------------"
  a_cart.each do |post|
    puts "#{post[:name]}/#{post[:price]}/#{post[:count]}\n#{line}"
    total_price += post[:price] * post[:count]
  end
  puts "合計金額 : #{total_price}"

  puts "[0]購入確定する"
  puts "[1]買い物を続ける"
  input = gets.to_i

  if input == 0
    buy_program(total_price)
  elsif input == 1
    return
  else
    exception
  end
end

def buy_program(total_price)
  puts "合計金額 : #{total_price}"
  puts "支払う金額を入力してください："
  input = gets.to_i
  if input >= total_price
    post = input - total_price
    puts "お釣り : #{post}"
  else
    puts "金額が足りません"
    buy_program(total_price)
  end
end

def end_program
  exit
end

def exception
  puts "入力された値は無効な値です"
end

cart = []             # 配列オブジェクトcartの生成

while true do
 # メニューの表示
  puts "商品数: #{cart.length}"
  puts "[0]商品をカートに入れる"
  unless cart.empty?
    puts "[1]カートを確認する"
  end
  puts "[2]アプリを終了する"

  input = gets.to_i

  if input == 0 then
    cart = post_review(cart)  # post_reviewメソッドの呼び出し
  elsif input == 1 then
    check_reviews(cart) # check_reviewsメソッドの呼び出し
  elsif input == 2 then
    end_program     # end_programメソッドの呼び出し
  else
    exception           # exceptionメソッドの呼び出し
  end
end